plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'jacoco'
}

repositories {
    maven { url 'https://jitpack.io' }
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "wtf.qase.appskeleton.example"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }

        buildConfigField "String", "SERVER_BASE_URL", "\"https://private-30c5f-appskeletontest.apiary-mock.com/\""
    }

    buildTypes {
        debug {
            testCoverageEnabled true // Enable instrumentation coverage
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main { java.srcDirs = ['src/main/java', 'src/main/kotlin'] }
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true // Needed by Robolectric
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':core')
    implementation "com.github.Qase:KotlinLogger:$kotlin_logger_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Architecture Components
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Android
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Retrofit
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // Koin
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // Test
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.mockito:mockito-inline:2.21.0'
    testImplementation 'org.robolectric:robolectric:4.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
}

jacoco {
    toolVersion "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
}

// Depends on 'createDebugCoverageReport' only if you want merge unit tests and instrumental tests
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    description 'Generate code coverage.'
    group 'Verification'

    reports {
        xml.enabled false
        csv.enabled false
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    classDirectories = files([debugTree])
    sourceDirectories = files([mainSrc])
    executionData = fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec' // Only if you want merge unit tests and instrumental tests
    ])
}
